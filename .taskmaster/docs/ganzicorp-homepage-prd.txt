# Overview  
GanziCorp Homepage는 회사의 온라인 존재감을 확립하기 위한 간단하면서도 전문적인 회사 홈페이지입니다. Supabase 무료 티어만을 활용하여 비용 효율적으로 운영 가능하며, 관리자 로그인 기능, 공지사항 게시판, 문의하기 및 답변 시스템을 포함합니다. 빠른 프로토타입 구축을 목적으로 하며, 향후 확장 가능한 기반을 제공합니다.

# Core Features  

## 1. 정적 페이지 구성
- **메인 페이지 (/)**: 회사 로고, 슬로건, CTA 버튼으로 구성된 랜딩 페이지
- **회사 소개 (/about)**: 회사 대표, 연혁, 비전 등을 소개하는 페이지
- **서비스 소개 (/services)**: 5개 주요 서비스에 대한 이미지와 설명
- **조직 구성 (/team)**: 팀 구성원 소개 및 조직도
- **공지사항 (/notice)**: 공지사항 목록 및 상세 페이지
- **문의하기 (/contact)**: 고객 문의 폼

## 2. 관리자 인증 시스템
- Supabase Auth를 활용한 관리자 로그인
- 관리자 전용 대시보드 (/admin)
- 보안이 적용된 관리자 전용 라우트

## 3. 콘텐츠 관리 시스템
- 공지사항 CRUD 기능 (생성, 읽기, 수정, 삭제)
- 문의글 리스트 조회 및 관리
- 문의글에 대한 답변 작성 시스템

## 4. 문의 시스템
- 누구나 접근 가능한 문의 작성 폼
- 실시간 문의 저장 및 관리자 알림
- 문의에 대한 답변 기능

# User Experience  

## 사용자 페르소나
- **일반 방문자**: 회사 정보를 찾거나 서비스에 대해 문의하는 잠재 고객
- **관리자**: 콘텐츠를 관리하고 고객 문의에 응답하는 회사 직원

## 주요 사용자 플로우
1. **일반 방문자 플로우**:
   - 홈페이지 방문 → 서비스 탐색 → 회사 정보 확인 → 문의 작성
2. **관리자 플로우**:
   - 로그인 → 대시보드 접근 → 콘텐츠 관리 → 문의 답변

## UI/UX 고려사항
- Tailwind CSS + Shadcn UI를 활용한 모던하고 일관된 디자인
- 완전 반응형 웹사이트 (모바일, 태블릿, 데스크톱)
- 직관적인 네비게이션과 사용자 친화적인 인터페이스
- 접근성 및 사용성을 고려한 디자인

# Technical Architecture  

## 시스템 컴포넌트
- **Frontend**: Next.js (App Router) - React 기반 풀스택 프레임워크
- **Backend**: Supabase - BaaS (Backend as a Service)
- **Database**: PostgreSQL (Supabase 제공)
- **Authentication**: Supabase Auth
- **Styling**: Tailwind CSS + Shadcn UI
- **Deployment**: Vercel

## 데이터 모델
### notices 테이블
- id (uuid, Primary Key)
- title (text) - 공지사항 제목
- content (text) - 공지사항 내용
- created_at (timestamp) - 생성 시간
- updated_at (timestamp) - 수정 시간

### inquiries 테이블
- id (uuid, Primary Key)
- name (text) - 문의자 이름
- email (text) - 문의자 이메일
- message (text) - 문의 내용
- answer (text, nullable) - 관리자 답변
- created_at (timestamp) - 문의 생성 시간
- answered_at (timestamp, nullable) - 답변 시간

## API 및 통합
- Supabase REST API를 통한 데이터 CRUD
- Supabase Realtime을 활용한 실시간 업데이트 (선택사항)
- GitHub 연동을 통한 자동 배포

## 인프라 요구사항
- Supabase 무료 티어 활용
- Vercel 무료 호스팅
- GitHub Private Repository

# Development Roadmap  

## Phase 1: MVP 기반 구축
- 기본 프로젝트 설정 (Next.js, Tailwind CSS, Shadcn UI)
- Supabase 프로젝트 설정 및 데이터베이스 스키마 구성
- 정적 페이지 구현 (홈, 소개, 서비스, 팀)
- 기본 레이아웃 및 네비게이션 구현

## Phase 2: 인증 및 관리자 기능
- Supabase Auth 통합
- 관리자 로그인/로그아웃 기능
- 관리자 대시보드 구현
- 보호된 라우트 설정

## Phase 3: 콘텐츠 관리 시스템
- 공지사항 CRUD 기능 완성
- 공지사항 목록 및 상세 페이지
- 관리자 공지사항 관리 인터페이스

## Phase 4: 문의 시스템
- 문의하기 폼 구현
- 문의 데이터 저장 및 관리
- 관리자 문의 답변 시스템

## Phase 5: 배포 및 최적화
- GitHub Repository 설정
- Vercel 배포 설정
- 성능 최적화 및 SEO 개선
- 테스트 및 버그 수정

# Logical Dependency Chain

## 기초 설정 (우선순위: 최고)
1. Next.js 프로젝트 초기화 및 기본 설정
2. Tailwind CSS 및 Shadcn UI 설정
3. Supabase 프로젝트 생성 및 환경 변수 설정

## 정적 콘텐츠 구현 (우선순위: 높음)
4. 기본 레이아웃 및 헤더/푸터 컴포넌트
5. 홈페이지 랜딩 페이지
6. 정적 페이지들 (소개, 서비스, 팀)

## 데이터베이스 및 인증 (우선순위: 높음)
7. 데이터베이스 스키마 생성 (notices, inquiries 테이블)
8. Supabase Auth 통합
9. 관리자 계정 설정

## 동적 기능 구현 (우선순위: 중간)
10. 공지사항 목록 및 상세 페이지
11. 관리자 대시보드 및 보호된 라우트
12. 공지사항 CRUD 기능

## 문의 시스템 (우선순위: 중간)
13. 문의하기 폼 구현
14. 문의 데이터 처리 API
15. 관리자 문의 관리 기능

## 배포 및 마무리 (우선순위: 낮음)
16. GitHub Repository 설정
17. Vercel 배포 설정
18. 성능 최적화 및 테스트

# Risks and Mitigations  

## 기술적 도전과제
- **위험**: Supabase 무료 티어 제한사항
- **완화**: 초기 단계에서 사용량 모니터링 및 최적화

- **위험**: Next.js App Router 복잡성
- **완화**: 단계별 구현 및 충분한 테스트

## MVP 정의 및 구축
- **위험**: 기능 범위 확대로 인한 복잡성 증가
- **완화**: 핵심 기능에 집중하고 단계별 확장

- **위험**: 디자인 일관성 부족
- **완화**: Shadcn UI 컴포넌트 활용 및 디자인 시스템 구축

## 리소스 제약
- **위험**: 개발 시간 부족
- **완화**: 우선순위 기반 개발 및 MVP 접근

- **위험**: 테스트 환경 부족
- **완화**: Vercel Preview 환경 활용

# Appendix  

## 기술 세부사항
- **Node.js**: v18+ 권장
- **Next.js**: 최신 안정 버전 (App Router 사용)
- **Supabase**: JavaScript Client SDK
- **Tailwind CSS**: v3+ 
- **Shadcn UI**: 최신 컴포넌트 라이브러리

## 계정 정보 (테스트용)
- 관리자 이메일: admin@testcorp.com
- 관리자 비밀번호: testadmin123

## 추가 고려사항
- 더미 이미지 및 콘텐츠 사용 (테스트 목적)
- SEO 최적화를 위한 메타 태그 설정
- 접근성 가이드라인 준수
- 모바일 우선 반응형 디자인 